buildscript {
	repositories {
		maven {url "https://maven.google.com"}
		maven {url "https://jcenter.bintray.com"}
	}

	dependencies {
		classpath 'com.android.tools.build:gradle:4.1.3'
	}
}

apply plugin: 'com.android.application'

repositories {
	maven {url "https://maven.google.com"}
	maven {url "https://jcenter.bintray.com"}

}


def assetDir = "assets"
def properties = new Properties()
if (project.rootProject.file('local.properties').exists()) {
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    assetDir = properties.getProperty("asset.dir", "assets")
}


android {
	compileSdkVersion 29
	buildToolsVersion "30.0.3"
	useLibrary 'org.apache.http.legacy'
	sourceSets {
		main {
			manifest.srcFile 'AndroidManifest.xml'
			java.srcDirs = ['src']
			resources.srcDirs = ['src']
			aidl.srcDirs = ['src']
			renderscript.srcDirs = ['src']
			res.srcDirs = ['res']
			assets.srcDirs = [assetDir]
			jniLibs {
				srcDir 'libs'
			}
		}

		androidTest.setRoot('tests')
		debug.setRoot('build-types/debug')
		release.setRoot('build-types/release')
	}

	dexOptions {
		preDexLibraries = false
	}

	defaultConfig{
		minSdkVersion 19
		targetSdkVersion 29
		multiDexEnabled true
	}
	packagingOptions {
		exclude "META-INF/LICENSE"
		exclude "META-INF/DEPENDENCIES"
	}
	lintOptions {
		checkReleaseBuilds false
		abortOnError false
	}

	if (KEYSTORE_PATH?.trim()) {
		signingConfigs{
			releaseWithSignedKey {
				storeFile file(KEYSTORE_PATH)
				storePassword KEYSTORE_PW
				keyAlias KEYSTORE_ALIAS
				keyPassword KEYSTORE_ALIAS_PW
			}
		}
	}

	buildTypes {
		debug {
			debuggable true
			shrinkResources false
			minifyEnabled false
			proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'morpheus_proguard-project.txt'
			if (KEYSTORE_PATH?.trim()) {
				signingConfig signingConfigs.releaseWithSignedKey
			}
		}
		release {
			debuggable false
			shrinkResources true
			minifyEnabled true
			proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'morpheus_proguard-project.txt'
			if (KEYSTORE_PATH?.trim()) {
				signingConfig signingConfigs.releaseWithSignedKey
			}
		}
	}
}

//추가
repositories {
    flatDir {
        dirs 'libs', 'mcoreLibs'
    }
}



dependencies {
	implementation fileTree(dir: 'mcoreLibs', include: '*.jar')

	/**
	* ==========================================
	* 외부라이브러리 적용시  [example.aar file]
	* ==========================================
	* implementation name: 'example-release', ext: 'aar'
	*/

	implementation 'com.android.support:multidex:1.0.3'
	implementation 'com.samskivert:jmustache:1.15'
}

import org.apache.tools.ant.taskdefs.condition.Os

task  AppRunDebug (type: Exec, dependsOn: 'installDebug') {
	if (Os.isFamily(Os.FAMILY_WINDOWS)) {
		commandLine 'cmd', '/c', android.getAdbExe().toString(), 'shell', 'am', 'start', '-n', 'com.hts.hable/.Startup'
	}
	else if (Os.isFamily(Os.FAMILY_MAC)) {
		commandLine android.getAdbExe().toString(), "shell", 'am', 'start', '-n', 'com.hts.hable/.Startup'
	}
}

